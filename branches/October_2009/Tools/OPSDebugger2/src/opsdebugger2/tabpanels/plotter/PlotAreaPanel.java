/*
 * PlotAreaPanel.java
 *
 * Created on den 25 april 2008, 10:36
 */
package opsdebugger2.tabpanels.plotter;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Stroke;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.border.TitledBorder;
import opsdebugger2.OPSDebugger2App;
import opsdebugger2.proxy.ValueListener;

/**
 *
 * @author  angr
 */
public class PlotAreaPanel extends javax.swing.JPanel implements Runnable, ListCellRenderer
{

    private String valueOfInterest;
    private Vector<PlotValue> plotValues = new Vector<PlotValue>();
    private double currTime = 0;
    private double lastTime = 0;
    private double timeStep = 0.1;
    private double windowSize = 10;
    private double yMax = 1.0;
    private double yMin = -1.0;
    private double rate = 10;
    private boolean clear = true;
    private int yMarg = 30;

    /** Creates new form PlotAreaPanel */
    public PlotAreaPanel()
    {
        initComponents();

        ValueTransferHandler vTransHand = new ValueTransferHandler();
        vTransHand.addPropertyChangeListener(new PropertyChangeListener()
        {

            public void propertyChange(PropertyChangeEvent evt)
            {
                String valeuName = (String) evt.getNewValue();

                openNewValuePlot(valeuName);

            }
        });

        plotList.setCellRenderer(this);
        setTransferHandler(vTransHand);
        Thread t = new Thread(this);
        t.start();
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        synchronized (this)
        {
            if (clear)
            {
                super.paintComponent(g);
                timeStep = (double) ((getWidth() - plotListPanel.getWidth()) / (windowSize * rate));
                clear = false;
            }

            currTime += timeStep;

            double yscale = (getHeight() - yMarg) / (yMax - yMin);
            double ytrans = -yMin * yscale;
            
//            int unitSize = (getHeight() - yMarg) / 10;
//            for (int i = 0; i <= 10; i++)
//            {
//                g.drawLine(0, (int)((getHeight() - yMarg) - unitSize*i), 10, (int)((getHeight() - yMarg) - unitSize*i));
//                
//            }


            for (PlotValue plotValue : plotValues)
            {
                ((Graphics2D) g).setStroke(plotValue.getStroke());
                g.setColor(plotValue.getColor());
                int last = (int) (getHeight() - yMarg - plotValue.getLastValue() * yscale - ytrans);
                g.drawLine((int) lastTime, last, (int) currTime, (int) (getHeight() - yMarg - plotValue.getCurrentValue() * yscale - ytrans));
            }

            //g.fillRect((int)currTime, getHeight() - 50, 10  , 10);

            lastTime = currTime;
            if (lastTime >= getWidth() - plotListPanel.getWidth())
            {
                lastTime = 0;
                currTime = 0;
                clear = true;
            }
        }


    }

    private void openNewValuePlot(String valeuName) throws HeadlessException
    {
        valueOfInterest = valeuName;

        PlotSettingsPanel psp = new PlotSettingsPanel(valeuName);

        JOptionPane.showConfirmDialog(OPSDebugger2App.getApplication().getMainFrame(), psp, "Plot settings", JOptionPane.OK_CANCEL_OPTION);


        PlotValue pv = new PlotValue(valeuName, psp.getSettings());
        plotValues.add(pv);

        plotList.setListData(plotValues);

        ((TitledBorder) getBorder()).setTitle("");
        clear = true;
        updateUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        yMaxTextField = new javax.swing.JTextField();
        yMinTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        timeScaleSetButton = new javax.swing.JButton();
        windowSizeTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        rateTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        plotListPanel = new javax.swing.JPanel();
        plotListScrollPane = new javax.swing.JScrollPane();
        plotList = new javax.swing.JList();
        deletePlotButton = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(opsdebugger2.OPSDebugger2App.class).getContext().getResourceMap(PlotAreaPanel.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("Form.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 0, 11), resourceMap.getColor("Form.border.titleColor"))); // NOI18N
        setName("Form"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        yMaxTextField.setText(resourceMap.getString("yMaxTextField.text")); // NOI18N
        yMaxTextField.setName("yMaxTextField"); // NOI18N

        yMinTextField.setText(resourceMap.getString("yMinTextField.text")); // NOI18N
        yMinTextField.setName("yMinTextField"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        timeScaleSetButton.setText(resourceMap.getString("timeScaleSetButton.text")); // NOI18N
        timeScaleSetButton.setName("timeScaleSetButton"); // NOI18N
        timeScaleSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeScaleSetButtonActionPerformed(evt);
            }
        });

        windowSizeTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        windowSizeTextField.setText(resourceMap.getString("windowSizeTextField.text")); // NOI18N
        windowSizeTextField.setName("windowSizeTextField"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        rateTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rateTextField.setText(resourceMap.getString("rateTextField.text")); // NOI18N
        rateTextField.setName("rateTextField"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        plotListPanel.setBackground(resourceMap.getColor("plotListPanel.background")); // NOI18N
        plotListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("plotListPanel.border.title"))); // NOI18N
        plotListPanel.setName("plotListPanel"); // NOI18N

        plotListScrollPane.setBorder(null);
        plotListScrollPane.setName("plotListScrollPane"); // NOI18N

        plotList.setName("plotList"); // NOI18N
        plotListScrollPane.setViewportView(plotList);

        deletePlotButton.setText(resourceMap.getString("deletePlotButton.text")); // NOI18N
        deletePlotButton.setName("deletePlotButton"); // NOI18N
        deletePlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlotButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plotListPanelLayout = new javax.swing.GroupLayout(plotListPanel);
        plotListPanel.setLayout(plotListPanelLayout);
        plotListPanelLayout.setHorizontalGroup(
            plotListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deletePlotButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(plotListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
        );
        plotListPanelLayout.setVerticalGroup(
            plotListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, plotListPanelLayout.createSequentialGroup()
                .addComponent(plotListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deletePlotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yMaxTextField)
                    .addComponent(yMinTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(96, 96, 96)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(windowSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeScaleSetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(plotListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(yMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 398, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(timeScaleSetButton)
                    .addComponent(windowSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(rateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)))
            .addComponent(plotListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    // TODO add your handling code here:
    yMax = Double.parseDouble(yMaxTextField.getText());
    yMin = Double.parseDouble(yMinTextField.getText());
    clear = true;
}//GEN-LAST:event_jButton1ActionPerformed

private void timeScaleSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeScaleSetButtonActionPerformed
// TODO add your handling code here:
    rate = Double.parseDouble(rateTextField.getText());
    windowSize = Double.parseDouble(windowSizeTextField.getText());
    clear = true;


}//GEN-LAST:event_timeScaleSetButtonActionPerformed

private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
// TODO add your handling code here:
    clear = true;
}//GEN-LAST:event_formComponentResized

private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
// TODO add your handling code here:
    clear = true;
}//GEN-LAST:event_formComponentShown

private void deletePlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlotButtonActionPerformed
// TODO add your handling code here:
    synchronized (this)
    {
        plotValues.remove(plotList.getSelectedValue());
        clear = true;
    }
}//GEN-LAST:event_deletePlotButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deletePlotButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList plotList;
    private javax.swing.JPanel plotListPanel;
    private javax.swing.JScrollPane plotListScrollPane;
    private javax.swing.JTextField rateTextField;
    private javax.swing.JButton timeScaleSetButton;
    private javax.swing.JTextField windowSizeTextField;
    private javax.swing.JTextField yMaxTextField;
    private javax.swing.JTextField yMinTextField;
    // End of variables declaration//GEN-END:variables
    public void run()
    {
        while (true)
        {
            try
            {
                Thread.sleep((long) ((1 / rate) * 1000));
                repaint();
            }
            catch (InterruptedException ex)
            {
                Logger.getLogger(PlotAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
    {
        JLabel label = new JLabel();
        label.setOpaque(true);
        label.setBackground(getBackground());
        PlotValue pv = (PlotValue) value;
        label.setText(pv.toString());
        label.setForeground(pv.getColor());

        if (index == list.getSelectedIndex())
        {
            label.setBackground(pv.getColor());
            label.setForeground(Color.white);
        }

        return label;
    }
}
