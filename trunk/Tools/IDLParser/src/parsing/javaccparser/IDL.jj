
options
{
  
  STATIC = false;

}




PARSER_BEGIN(IDLParser)
package parsing.javaccparser;

import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import parsing.IDLField;

public class IDLParser
{

    private IDLField currentIDLField;

    public ParserEvent<String> packageDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> idlDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> enumDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> idlCloseEvent = new ParserEvent<String>();
    public ParserEvent<String> enumCloseEvent = new ParserEvent<String>();
    public ParserEvent<IDLField> fieldDeclareEvent = new ParserEvent<IDLField>();
    public ParserEvent<String> extendsEvent = new ParserEvent<String>();
    public ParserEvent<String> enumElementEvent = new ParserEvent<String>();
    public ParserEvent<String> commentEvent = new ParserEvent<String>();

  public static void main(String args[])
  {
    try
    {
        IDLParser parser;
        parser = new IDLParser(new java.io.FileInputStream("TestIDL.idl"));

        parser.idlDeclareEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("class " + eventData + " declared.");
                }
            });
        parser.idlCloseEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("class " + eventData + " done.");
                }
            });

        parser.packageDeclareEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("package " + eventData + " declared.");
                }
            });

        parser.enumDeclareEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("enum " + eventData + " declared.");
                }
            });
        parser.enumCloseEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("enum " + eventData + " done.");
                }
            });
        parser.enumElementEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("enum element " + eventData + ".");
                }
            });
        parser.fieldDeclareEvent.add(new ParserEventCallback<IDLField>() {

                public void onEvent(IDLField eventData, ParserEvent e)
                {
                    System.out.println("field  " + eventData + ".");
                }
            });
        parser.extendsEvent.add(new ParserEventCallback<String>() {

                public void onEvent(String eventData, ParserEvent e)
                {
                    System.out.println("extends  " + eventData + ".");
                }
            });


        parser.specification();
    }
    catch (ParseException ex)
    {
        Logger.getLogger(IDLParser.class.getName()).log(Level.SEVERE, null, ex);
    }
    catch (FileNotFoundException ex)
    {
        Logger.getLogger(IDLParser.class.getName()).log(Level.SEVERE, null, ex);
    }
  }
}

PARSER_END(IDLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  < " " >
| < "\t" >
| < "\n" >
| < "\r" >
| < "//" (~["\n"])* "\n" >
| < "#" ([" ","\t"])* (["0"-"9"])+
    (([" ","\t"])* "\"" (~["\""])+ "\""
           ([" ","\t"])* (["0"-"9"])* ([" ","\t"])* (["0"-"9"])*)? "\n" >
}

/* Production 1 */

void specification() :
{}
{
   definition()
|
    (<ANOTATION>)+

}

/* Production 2 */

void definition() :
{}
{
  "package" module() ";" (body_declare())+ <EOF>
    
}
void body_declare():
{}
{
    type_declare()
|
    <ANOTATION>

}

void type_declare():
{}
{
    LOOKAHEAD(2)
    struct_type()
|
    enum_type()

}

/* Production 3 */

String module() :
{ String packName = ""; String tName = "";}
{
   tName = identifier() {packName += tName;} (  "." {packName += ".";} tName = identifier() {packName += tName;} )*

   {
        packageDeclareEvent.fireEvent(packName);
        return packName;
    }
}

String struct_type() :
{
    String name = "";
    String parName = "";
}
{

  "class" name=identifier() {idlDeclareEvent.fireEvent(name);}  member_list()
  {
    {idlCloseEvent.fireEvent(name);}
    System.out.println("struct " + name);
    return name;
  }


}


String enum_type() :
{String name = "";}
{
    "enum" name=identifier()  {enumDeclareEvent.fireEvent(name);} "{" enum_body() "}"
    {
        enumCloseEvent.fireEvent(name);
        return name;
    }

}
void enum_body() :
{String tName = "";String ANOTATION = ""; String tANOTATION = ""; }
{
  tName = identifier() {enumElementEvent.fireEvent(tName);} ( "," tName = identifier() {enumElementEvent.fireEvent(tName);})*

}


/* Production 51 */

void member_list() :
{String tName = "";}
{
  "extends" tName = idl_type() {extendsEvent.fireEvent(tName);} "{"( member() )+ "}"
|
LOOKAHEAD(2)
(
  "{" ( member() )+ "}"
)

}

/* Production 52 */

void member() :
{String typeName = ""; String fieldName = "";String comment = ""; String tComment = ""; }
{
  {currentIDLField = new IDLField(fieldName, "");}

  typeName = type_spec() fieldName = declarators(currentIDLField) ";"
  {
    if(fieldName.contains("[") && fieldName.contains("]"))
    {
        typeName = typeName.trim() + fieldName.substring(fieldName.indexOf("["), fieldName.indexOf("]") + 1);
        fieldName = fieldName.replace("[", "").trim();
        fieldName = fieldName.replace("]", "").trim();
        //currentIDLField.setArray(true);
    }
    
    currentIDLField.setName(fieldName);
    currentIDLField.setType(typeName);
    fieldDeclareEvent.fireEvent(currentIDLField);
}
|
    comment = <ANOTATION>.image
    {commentEvent.fireEvent(comment);}



}

String identifier() :
{ String name = ""; }
{
    name = <ID>.image
  { return name; }

}

String declarators(IDLField currentIDLField) :
{String ret = "";
 String size = ""; }
{

  ret = declarator()
  {return ret;}
|
   "[" [ size = <DECIMALINT>.image ] "]" ret = declarator()
  {
     if(!size.equals(""))
     {
        currentIDLField.setArraySize(Integer.parseInt(size));
     }

     return "[" + size + "] " + ret;}





}

/* Production 35 */

String declarator() :
{String ret = "";}
{

  ret = simple_declarator()
  {return ret;}
}


String type_spec() :
{String ret = "";}
{

    ret = simple_type_spec() 

 {return ret;}

}

String simple_type_spec() :
{String ret = "";}
{

  ret = base_type_spec()

  {return ret;}


}

String complex_type_spec() :
{String ret = "";}
{

    (ret = base_type_spec() fixed_array_size())


{return ret;}
}

String base_type_spec() :
{String typeName = "";}
{

  typeName = floating_pt_type()
  {return typeName;}
|
  typeName = integer_type()
  {return typeName;}
|
  typeName = boolean_type()
  {return typeName;}
|
  typeName = string_type()
  {return typeName;}
|
  typeName = idl_type()
  {
    currentIDLField.setIdlType(true);
    return typeName;
  }
|
  typeName = abs_idl_type()
  {
    currentIDLField.setIdlType(true);
    currentIDLField.setAbstract(true);
    return typeName;
  }


}

String idl_type() :
{ String className = ""; String tName = ""; String fieldName = "";}
{
   tName = identifier() {className += tName;} (  "." {className += ".";} tName = identifier() {className += tName;} )*
   {
        return className;
   }
}
String abs_idl_type() :
{ String className = ""; String tName = ""; String fieldName = "";}
{
   "virtual" tName = identifier() {className += tName;} (  "." {className += ".";} tName = identifier() {className += tName;} )*
   {
        return className;
   }
}
String idl_type_array() :
{ String className = ""; String tName = ""; String fieldName = "";}
{
    ( className = idl_type() "[" "]")

   {
        return className;
    }
}

String simple_declarator() :
{String ret = "";}
{
  ret = identifier()
  {return ret;}
}

String complex_declarator() :
{String ret = "";}
{
  ret = array_declarator()
   {return ret;}
}

String array_declarator() :
{String ret = "";}
{
  ( fixed_array_size() ) ret = identifier()
   {return ret ;}
}

/* Production 64 */

void fixed_array_size() :
{}
{
  "[" "]"
}


/* Production 38 */

String floating_pt_type() :
{}
{
  "float"
  {return "float" ;}
|
  "double"
  {return "double" ;}
}



/* Production 39 */

String integer_type() :
{}
{
  "int"
  {return "int" ;}
|
  "short"
  {return "short" ;}
|
  "long"
  {return "long" ;}
|
  "byte"
  {return "byte" ;}
}


/* Production 47 */

String boolean_type() :
{}
{
  "boolean"
  {return "boolean" ;}
}

String string_type() :
{}
{
  "string"
  {return "string" ;}
}

/* Production 48 */


void integer_literal() :
{}
{
  <OCTALINT>
|
  <DECIMALINT>
|
  <HEXADECIMALINT>
}

void string_literal() :
{}
{
  <STRING>
}

void character_literal() :
{}
{
  <CHARACTER>
}

void floating_pt_literal() :
{}
{
  <FLOATONE>
|
  <FLOATTWO>
}

TOKEN :
{
  <  ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
| <  OCTALINT : "0" (["0"-"7"])* (["u","U","l","L"])? >
| <  DECIMALINT : ["1"-"9"] (["0"-"9"])* (["u","U","l","L"])? >
| <  HEXADECIMALINT : ("0x"|"0X") (["0"-"9","a"-"f","A"-"F"])+ (["u","U","l","L"])? >
| <  FLOATONE : ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
   (["e","E"] (["-","+"])? (["0"-"9"])+)? (["f","F","l","L"])? >
| <  FLOATTWO : (["0"-"9"])+ ["e","E"] (["-","+"])?
   (["0"-"9"])+ (["f","F","l","L"])? >
| <  CHARACTER : "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
| <  STRING : "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
|
    < ANOTATION: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">


    
}



