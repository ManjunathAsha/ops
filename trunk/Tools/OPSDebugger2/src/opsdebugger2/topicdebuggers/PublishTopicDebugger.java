/*
 * PublishTopicDebugger.java
 *
 * Created on den 30 maj 2008, 14:54
 */
package opsdebugger2.topicdebuggers;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.TitledBorder;
import ops.OPSObject;
import ops.Publisher;
import ops.Subscriber;
import ops.Topic;
import opsdebugger2.OPSDebugger2App;
import opsdebugger2.tranferhandlers.TopicTransferHandler;
import opsreflection.OPSFactory;

/**
 *
 * @author  angr
 */
public class PublishTopicDebugger extends javax.swing.JPanel
{

    /** Creates new form PublishTopicDebugger */
    public PublishTopicDebugger()
    {
        initComponents();

        TopicTransferHandler tTransHand = new TopicTransferHandler();
        tTransHand.addPropertyChangeListener(new PropertyChangeListener()
        {

            public void propertyChange(PropertyChangeEvent evt)
            {
                try
                {
                    String valeuName = (String) evt.getNewValue();
                    addNewPublisher(valeuName);
                    return;
                } catch (InstantiationException ex)
                {
                } catch (IllegalAccessException ex)
                {
                } catch (ClassNotFoundException ex)
                {
                }



            }
        });



        setTransferHandler(tTransHand);
    }

    private void addNewPublisher(String valeuName) throws IllegalAccessException, InstantiationException, ClassNotFoundException
    {
        if (valeuName.equals(opsdebugger2.OPSDebugger2App.getActiveSubscriberProxy().getTopic().getName()))
        {
            OPSFactory opsf = OPSDebugger2App.getOPSFactory();
            Publisher pub = opsf.createPublisher(valeuName);

            if (pub != null)
            {

                OPSObject data;
                Topic t = opsf.createTopic(valeuName);
                data = opsf.createOPSObject(t.getTypeID());
                TopicPublisherPanel tpp = new TopicPublisherPanel(pub, data);


                add(tpp);
                tpp.setVisible(true);
                tpp.updateUI();
                updateUI();
                ((TitledBorder) getBorder()).setTitle("");
                updateUI();
            }
        }
        else
        {
            ((TitledBorder) getBorder()).setTitle("Error: " + valeuName + " is not a valid topic, you can only drop topics on this panel...");
            updateUI();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(opsdebugger2.OPSDebugger2App.class).getContext().getResourceMap(PublishTopicDebugger.class);
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("Form.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 0, 11), resourceMap.getColor("Form.border.titleColor"))); // NOI18N
        setName("Form"); // NOI18N
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
