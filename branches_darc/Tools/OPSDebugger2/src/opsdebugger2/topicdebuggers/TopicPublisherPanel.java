/*
 * TopicPublisherPanel.java
 *
 * Created on den 5 december 2007, 14:57
 */
package opsdebugger2.topicdebuggers;

import java.lang.reflect.Field;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import ops.OPSEnum;
import ops.OPSObject;
import ops.Publisher;

/**
 *
 * @author  angr
 */
public class TopicPublisherPanel extends javax.swing.JPanel implements Runnable
{

    private Publisher publisher;
    private OPSObject obj;
    boolean isStarted = false;
    boolean isClosed = false;
    double publishRate = 1.0;
    public Observable closeEvent = new CloseEvent();
    private double currentPubSample;
    ScriptEngine engine;

    /** Creates new form TopicPublisherPanel */
    public TopicPublisherPanel(Publisher p, OPSObject obj)
    {
        this.publisher = p;
        this.obj = obj;

        initComponents();
        topicNameLabel.setText("" + p.getTopic().getName() + " on " + p.getTopic().getDomainAddress() + ":" + p.getTopic().getPort());

        createTable(obj);

        ScriptEngineManager manager = new ScriptEngineManager();
        engine = manager.getEngineByExtension("js");

        Thread t = new Thread(this);
        t.start();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        rateTextField1 = new javax.swing.JTextField();
        closeButton1 = new javax.swing.JButton();
        topicNameLabel = new javax.swing.JLabel();
        mouseWheelUnitTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        publishOnceButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Publisher"));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Variable", "Value"
            }
        ));
        table.setToolTipText("Select a row and use scrollwheel or right click to alter values.");
        table.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                tableMouseWheelMoved(evt);
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollPane1.setViewportView(table);

        jLabel1.setText("Rate");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        rateTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rateTextField1.setText("1");

        closeButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opsdebugger2/resources/closebutton.PNG"))); // NOI18N
        closeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButton1ActionPerformed(evt);
            }
        });

        topicNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        topicNameLabel.setText("Topic name");

        mouseWheelUnitTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mouseWheelUnitTextField.setText("1.0");

        jLabel2.setText("Mouse Wheel Unit");

        publishOnceButton.setText("Once");
        publishOnceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishOnceButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 101, Short.MAX_VALUE)
                        .add(mouseWheelUnitTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rateTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(startButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pauseButton)
                                .add(2, 2, 2))
                            .add(layout.createSequentialGroup()
                                .add(topicNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(publishOnceButton)
                            .add(closeButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(closeButton1, 0, 0, Short.MAX_VALUE)
                    .add(topicNameLabel))
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(startButton)
                    .add(pauseButton)
                    .add(rateTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(publishOnceButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(mouseWheelUnitTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 453, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pauseButtonActionPerformed
    {//GEN-HEADEREND:event_pauseButtonActionPerformed
// TODO add your handling code here:
        isStarted = false;
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
// TODO add your handling code here:
        publishRate = Double.parseDouble(rateTextField1.getText());
        isStarted = true;
    }//GEN-LAST:event_startButtonActionPerformed

    private void closeButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButton1ActionPerformed
    {//GEN-HEADEREND:event_closeButton1ActionPerformed
// TODO add your handling code here:
        isStarted = false;
        setVisible(false);
        ((CloseEvent) closeEvent).fireEvent(this);
    }//GEN-LAST:event_closeButton1ActionPerformed

private void tableMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_tableMouseWheelMoved
// TODO add your handling code here:
    try
    {
        try
        {
            double d = Double.parseDouble((String) table.getModel().getValueAt(table.getSelectedRow(), 1));
            table.getModel().setValueAt("" + (d - evt.getWheelRotation() * Double.parseDouble(mouseWheelUnitTextField.getText())), table.getSelectedRow(), 1);
        } catch (NumberFormatException numberFormatException)
        {

            try
            {
                boolean boo = Boolean.parseBoolean((String) table.getModel().getValueAt(table.getSelectedRow(), 1));
                table.getModel().setValueAt("" + !boo, table.getSelectedRow(), 1);
            } catch (NumberFormatException e)
            {
                //Ok we cant change this value with scrollwheel...
            }

        }
    } catch (Exception e)
    {
        //Nothing was selected or unpredicted error..
    }
}//GEN-LAST:event_tableMouseWheelMoved

private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
// TODO add your handling code here:
    try
    {
        if (evt.isMetaDown())
        {
            try
            {
                double d = Double.parseDouble((String) table.getModel().getValueAt(table.getSelectedRow(), 1));
                table.getModel().setValueAt(
                        "" +
                        (0), table.getSelectedRow(), 1);
            } catch (NumberFormatException numberFormatException)
            {

                try
                {
                    boolean boo = Boolean.parseBoolean((String) table.getModel().getValueAt(table.getSelectedRow(), 1));
                    table.getModel().setValueAt(
                            "" +
                            !boo, table.getSelectedRow(), 1);
                } catch (NumberFormatException e)
                {
                    //Ok we cant change this value with right click...
                }

            }

        }
    } catch (Exception e)
    {
        //Nothing was selected or unpredicted error..
    }
}//GEN-LAST:event_tableMouseClicked

private void publishOnceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishOnceButtonActionPerformed
// TODO add your handling code here:
    if (!isStarted)
    {
        readObjectValues(obj);
        publisher.writeAsOPSObject(obj);
    }
}//GEN-LAST:event_publishOnceButtonActionPerformed

    public void run()
    {
        try
        {
            while (!isClosed)
            {
                while (isStarted)
                {
                    readObjectValues(obj);
                    publisher.writeAsOPSObject(obj);

                    Thread.sleep((long) (1000 / publishRate));
                    currentPubSample++;

                }

                Thread.sleep(1000);

            }
        } catch (InterruptedException ex)
        {
            ex.printStackTrace();
        }
    }

    private void readObjectValues(OPSObject oo)
    {
        publisher.setName((String) table.getModel().getValueAt(0, 1));
        publisher.setKey((String) table.getModel().getValueAt(1, 1));
        table.getModel().setValueAt(publisher.getCurrentPublicationID(),
                2, 1);

        engine.put("__i", publisher.getCurrentPublicationID());


        Field[] fields = oo.getClass().getFields();
        try
        {
            readFields(fields, oo, 3);

        } catch (IllegalArgumentException ex)
        {
            ex.printStackTrace();
        } catch (IllegalAccessException ex)
        {
            ex.printStackTrace();
        }


    }

    private int readFields(Field[] fields, Object o, int index) throws IllegalAccessException
    {

        for (int i = 0; i < fields.length; i++)
        {
            engine.put("__y", 0);
            try
            {

                if (isBasicType(fields[i].get(o)))
                {
                    String typeString = fields[i].get(o).getClass().getName();


                    if (typeString.equals("java.lang.Byte"))
                    {

                        try
                        {
                            byte d = (byte) Double.parseDouble((String) table.getModel().getValueAt(index, 1));
                            fields[i].setByte(o, d);

                        } catch (NumberFormatException numberFormatException)
                        {
                            String script = (String) table.getModel().getValueAt(index, 1);
                            try
                            {
                                engine.eval(script);
                            } catch (ScriptException ex)
                            {
                                //ok, dosent work output will be zero
                            }
                            byte val = (byte) ((Double) engine.get("__y")).doubleValue();
                            fields[i].setByte(o, val);

                        }

                    } else
                    {
                        if (typeString.equals("java.lang.Integer"))
                        {

                            try
                            {
                                int d = (int) Double.parseDouble((String) table.getModel().getValueAt(index, 1));
                                fields[i].setInt(o, d);

                            } catch (NumberFormatException numberFormatException)
                            {
                                String script = (String) table.getModel().getValueAt(index, 1);
                                try
                                {
                                    engine.eval(script);
                                } catch (ScriptException ex)
                                {
                                    //ok, dosent work output will be zero
                                    }
                                int val = (int) ((Double) engine.get("__y")).doubleValue();
                                fields[i].setInt(o, val);

                            }

                        } else
                        {
                            if (typeString.equals("java.lang.Double"))
                            {
//
                                try
                                {
                                    double d = Double.parseDouble((String) table.getModel().getValueAt(index, 1));
                                    fields[i].setDouble(o, d);

                                } catch (NumberFormatException numberFormatException)
                                {
                                    String script = (String) table.getModel().getValueAt(index, 1);
                                    try
                                    {
                                        engine.eval(script);
                                    } catch (ScriptException ex)
                                    {
                                        //ok, dosent work output will be zero
                                    }
                                    Double val = (Double) engine.get("__y");
                                    fields[i].setDouble(o, val);

                                }

//                                }
//                                catch (ParseException e)
//                                {
//                                    fields[i].setDouble(o, 0);
//                                }

                            } else
                            {


                                if (typeString.equals("java.lang.Float"))
                                {

                                    try
                                    {
                                        float d = (float) Double.parseDouble((String) table.getModel().getValueAt(index, 1));
                                        fields[i].setFloat(o, d);

                                    } catch (NumberFormatException numberFormatException)
                                    {
                                        String script = (String) table.getModel().getValueAt(index, 1);
                                        try
                                        {
                                            engine.eval(script);
                                        } catch (ScriptException ex)
                                        {
                                            //ok, dosent work output will be zero
                                        }
                                        float val = (float) ((Double) engine.get("__y")).doubleValue();
                                        fields[i].setFloat(o, val);

                                    }

                                } else
                                {


                                    if (typeString.equals("java.lang.Long"))
                                    {

                                        try
                                        {
                                            long d = (long) Double.parseDouble((String) table.getModel().getValueAt(index, 1));
                                            fields[i].setLong(o, d);

                                        } catch (NumberFormatException numberFormatException)
                                        {
                                            String script = (String) table.getModel().getValueAt(index, 1);
                                            try
                                            {
                                                engine.eval(script);
                                            } catch (ScriptException ex)
                                            {
                                                //ok, dosent work output will be zero
                                            }
                                            long val = (long) ((Double) engine.get("__y")).doubleValue();
                                            fields[i].setLong(o, val);

                                        }

                                    } else
                                    {
                                        if (typeString.equals("java.lang.Boolean"))
                                        {

                                            boolean val = Boolean.parseBoolean((String) table.getModel().getValueAt(index, 1));
                                            fields[i].setBoolean(o, val);

                                        } else
                                        {
                                            if (typeString.equals("java.lang.String"))
                                            {

                                                String val = (String) table.getModel().getValueAt(index, 1);
                                                fields[i].set(o, val);

                                            } else
                                            {
                                                if (fields[i].get(o) instanceof ops.OPSEnum)
                                                {


                                                    String val = (String) table.getModel().getValueAt(index + 1, 1);
                                                    ((OPSEnum)fields[i].get(o)).setByValueString(val);
                                                    Object oe = fields[i].get(o);
                                                    fields[i].set(o, fields[i].get(o));
                                                    System.out.println("");
                                                    //fields[i].set(o, val);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else
                {
                    if (fields[i].get(o) instanceof OPSObject)
                    {

                        index = readFields(fields[i].get(o).getClass().getFields(),
                                fields[i].get(o), index + 1) - 1;

                    }
                }
            } catch (Exception ex)
            {
                ex.printStackTrace();
            }
            index++;





        }
        return index;

    }

    private void createTable(OPSObject oo)
    {

        table.getModel().setValueAt("publisherName", 0, 0);
        table.getModel().setValueAt(publisher.getName(), 0, 1);

        table.getModel().setValueAt("Key", 1, 0);
        table.getModel().setValueAt("" + oo.getKey(), 1, 1);

        //outString += "publicationID = " + o.getPublicationID() + "\n";
        table.getModel().setValueAt("publicationID", 2, 0);
        table.getModel().setValueAt(
                "" + publisher.getCurrentPublicationID(), 2, 1);

//        table.getModel().setValueAt("publicationID", 2, 0);
//        table.getModel().setValueAt(oo., 2, 1);

        Field[] fields = oo.getClass().getFields();
        try
        {
            printFields(
                    fields,
                    oo,
                    3);

        } catch (IllegalArgumentException ex)
        {
            ex.printStackTrace();
        } catch (IllegalAccessException ex)
        {
            ex.printStackTrace();
        }

    }

    private int printFields(Field[] fields, Object o, int index) throws IllegalAccessException
    {




        for (int i = 0; i < fields.length; i++)
        {

            //outString += fields[i].getName() + " = " + fields[i].get(arg) + "\n";


            if (fields[i].get(o) instanceof OPSObject)
            {
                table.getModel().setValueAt("<HTML><b>" + fields[i].getName() + "</b></HTML>", index, 0);
                table.getModel().setValueAt("<HTML><b>" + fields[i].getName() + "</b></HTML>", index, 0);
                index++;

                index = printFields(fields[i].get(o).getClass().getFields(), fields[i].get(o), index);
            } else
            {
                table.getModel().setValueAt(fields[i].getName(), index, 0);
                table.getModel().setValueAt(
                        "" + fields[i].get(o), index, 1);
                index++;
            }


        }
        return index;

    }

    private boolean isBasicType(Object o)
    {

        if (o instanceof Integer ||
                o instanceof Byte ||
                o instanceof String ||
                o instanceof Float ||
                o instanceof Double ||
                o instanceof Long ||
                o instanceof Boolean)
        {
            return true;
        } else if (o instanceof ops.OPSEnum)
        {
            return true;
        } else
        {
            return false;
        }
    }

    class CloseEvent extends Observable
    {

        public void fireEvent(Object o)
        {
            setChanged();
            notifyObservers(o);

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField mouseWheelUnitTextField;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton publishOnceButton;
    private javax.swing.JTextField rateTextField1;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JButton startButton;
    private javax.swing.JTable table;
    private javax.swing.JLabel topicNameLabel;
    // End of variables declaration//GEN-END:variables
}
