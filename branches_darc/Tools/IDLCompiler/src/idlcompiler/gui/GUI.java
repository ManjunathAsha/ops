/*
 * GUI.java
 *
 * Created on den 20 maj 2007, 13:01
 */
package idlcompiler.gui;

import Exceptions.MissingInputException;
import Exceptions.TopicConfigFileMissingException;
import idlcompiler.compilers.CSCompiler;
import idlcompiler.compilers.Compiler;
import idlcompiler.compilers.CppCompiler;
import idlcompiler.compilers.JavaCompiler;
import idlcompiler.compilers.plugins.PluginsLoader;
import idlcompiler.compilers.plugins.PluginsLoaderException;
import idlcompiler.files.IDLFile;
import idlcompiler.files.Project;
import idlcompiler.files.ProjectFileParser;
import idlcompiler.files.TextFile;
import idlcompiler.files.TopicConfigFile;
import idlcompiler.topicconfigcreators.CSTopicConfigCreator;
import idlcompiler.topicconfigcreators.CppTopicConfigCreator;
import idlcompiler.topicconfigcreators.JavaTopicConfigCreator;
import idlcompiler.topicconfigcreators.XMLConfigLoader;
import java.awt.FileDialog;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.xml.sax.SAXException;
import parsing.IDLCompiler;
import parsing.ParseException;
import parsing.ProjectParser;
import util.FileHelper;

/**
 *
 * @author  Anton Gravestam
 */
public class GUI extends javax.swing.JFrame
{

    Project theProject;
    boolean saveNeeded;
    Vector<String> jarFilesListData = new Vector<String>();
    private PluginsLoader pluginsLoader;
    private ProjectParser projectParser;

    /** Creates new form GUI */
    public GUI(String startProject)
    {

        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        initComponents();
        enableProjectButtons(false);



        if (startProject.endsWith(".prj"))
        {
            openProjectFile(new File(startProject));
        }

        try
        {
            System.out.println("Loading plugins...");
            pluginsLoader = new PluginsLoader();
            System.out.println("Loaded " + pluginsLoader.getCompilerPlugins());


        }
        catch (PluginsLoaderException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }



    }

    public void addTab(TextFile file)
    {




        for (int i = 0; i < jTabbedPane1.getComponentCount(); i++)
        {
            FileTab currentTab = (FileTab) jTabbedPane1.getComponentAt(i);

            if (file == currentTab.getTextFile())
            {
                jTabbedPane1.setSelectedComponent(currentTab);
                return;
            }
        }
        FileTab tab = new FileTab(file);
        tab.getJEditorPane().addKeyListener(new KeyListener()
        {

            public void keyTyped(KeyEvent e)
            {
            }

            public void keyPressed(KeyEvent e)
            {
                if (!saveNeeded)
                {
                    setSaveNeeded();
                }
            }

            public void keyReleased(KeyEvent e)
            {
            }
        });

        String tabTitle = file.getName();//.substring(file.getName().lastIndexOf("\\") + 1, file.getName().length());

        jTabbedPane1.add(tabTitle, tab);
        jTabbedPane1.setSelectedComponent(tab);




    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();
        addFileButton = new javax.swing.JButton();
        projectNameLabel = new javax.swing.JLabel();
        newIDLFilejButton = new javax.swing.JButton();
        removeFileButton = new javax.swing.JButton();
        setTopicConfigButton = new javax.swing.JButton();
        viewTopicConfigButton = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        renameButton = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        topicConfigFileScrollPane = new javax.swing.JScrollPane();
        topicConfigFileList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        compileButton = new javax.swing.JButton();
        saveProjectButton = new javax.swing.JButton();
        parseProjectButton = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        optionsShortCutButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        outputScrollPane = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        openProjectMenuItem = new javax.swing.JMenuItem();
        newProjectMenuItem1 = new javax.swing.JMenuItem();
        saveProjectMenuItem1 = new javax.swing.JMenuItem();
        closeProjectMenuItem1 = new javax.swing.JMenuItem();
        openOldProjectMenuItem1 = new javax.swing.JMenuItem();
        toolsMenu1 = new javax.swing.JMenu();
        topicConfigToolMenuItem1 = new javax.swing.JMenuItem();
        optionsToolMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("OPS IDL Compiler");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Project"));
        jPanel1.setOpaque(false);

        jScrollPane1.setViewportView(projectList);

        addFileButton.setText("Add...");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        projectNameLabel.setText("No open Project");

        newIDLFilejButton.setText("New...");
        newIDLFilejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newIDLFilejButtonActionPerformed(evt);
            }
        });

        removeFileButton.setText("Remove");
        removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileButtonActionPerformed(evt);
            }
        });

        setTopicConfigButton.setText("Set...");
        setTopicConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTopicConfigButtonActionPerformed(evt);
            }
        });

        viewTopicConfigButton.setText("View");
        viewTopicConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTopicConfigButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setName("Files"); // NOI18N

        fileList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileList.setAutoscrolls(false);
        fileList.setVisibleRowCount(6);
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(fileList);

        jTabbedPane2.addTab("IDL Files", jScrollPane2);

        renameButton.setText("Rename...");

        topicConfigFileScrollPane.setViewportView(topicConfigFileList);

        jTabbedPane3.addTab("Topic config file", topicConfigFileScrollPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(setTopicConfigButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewTopicConfigButton))
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(newIDLFilejButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renameButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(addFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(81, 81, 81))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(projectNameLabel)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(renameButton, 0, 0, Short.MAX_VALUE)
                    .addComponent(newIDLFilejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setTopicConfigButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewTopicConfigButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 904, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jToolBar1.setRollover(true);
        jToolBar1.setOpaque(false);
        jToolBar1.add(jSeparator1);

        compileButton.setText("Compile");
        compileButton.setOpaque(false);
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(compileButton);

        saveProjectButton.setText("Save");
        saveProjectButton.setFocusable(false);
        saveProjectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveProjectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveProjectButton);

        parseProjectButton.setText("Parse");
        parseProjectButton.setFocusable(false);
        parseProjectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        parseProjectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        parseProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseProjectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(parseProjectButton);

        jPanel3.add(jToolBar1);

        jToolBar2.setRollover(true);

        optionsShortCutButton.setText("Options...");
        optionsShortCutButton.setFocusable(false);
        optionsShortCutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        optionsShortCutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        optionsShortCutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsShortCutButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(optionsShortCutButton);

        jPanel3.add(jToolBar2);

        jSplitPane1.setBorder(null);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.9);
        jSplitPane1.setOpaque(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        jPanel4.setOpaque(false);

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Courier", 0, 11));
        outputTextArea.setRows(5);
        outputScrollPane.setViewportView(outputTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setBottomComponent(jPanel4);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("IDL-files"));
        jPanel2.setOpaque(false);

        jTabbedPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idlFilesTabsKeyPressed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(531, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        jMenuBar2.setBackground(new java.awt.Color(224, 223, 227));

        jMenu2.setBackground(new java.awt.Color(224, 223, 227));
        jMenu2.setText("File");

        openProjectMenuItem.setText("Open Project...");
        openProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed1(evt);
            }
        });
        jMenu2.add(openProjectMenuItem);

        newProjectMenuItem1.setText("New Project...");
        newProjectMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(newProjectMenuItem1);

        saveProjectMenuItem1.setText("Save Project");
        saveProjectMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(saveProjectMenuItem1);

        closeProjectMenuItem1.setText("Close Project");
        closeProjectMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(closeProjectMenuItem1);

        openOldProjectMenuItem1.setText("Open OldStyle Project...");
        openOldProjectMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(openOldProjectMenuItem1);

        jMenuBar2.add(jMenu2);

        toolsMenu1.setBackground(new java.awt.Color(224, 223, 227));
        toolsMenu1.setText("Tools");

        topicConfigToolMenuItem1.setText("Topic Config Tool...");
        topicConfigToolMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicConfigToolMenuItemActionPerformed(evt);
            }
        });
        toolsMenu1.add(topicConfigToolMenuItem1);

        optionsToolMenuItem1.setText("Options...");
        optionsToolMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsToolMenuItemActionPerformed(evt);
            }
        });
        toolsMenu1.add(optionsToolMenuItem1);

        jMenuBar2.add(toolsMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_compileButtonActionPerformed
    {//GEN-HEADEREND:event_compileButtonActionPerformed


        Thread thread = new Thread(new Runnable()
        {

            public void run()
            {
                outputTextArea.setText("");
                outputTextArea.append("Saving project...\n");
                saveProjectMenuItemActionPerformed(null);
                if (!parseProject())
                {
                    return;
                }

                if (theProject.isJavaGenerationEnabled())
                {
                    outputTextArea.append("Compiling to Java...");
                    javaCompile();
                    outputTextArea.append("Done.\n");
                }

                if (theProject.isCppGenerationEnabled())
                {
                    outputTextArea.append("Compiling to C++...");
                    cppCompile();
                    outputTextArea.append("Done.\n");
                }

                if (theProject.isCsGenerationEnabled())
                {
                    outputTextArea.append("Compiling to C#...");
                    cSharpCompile();
                    outputTextArea.append("Done.\n");
                }

                try
                {
                    for (IDLCompiler comp : pluginsLoader.getCompilerPlugins())
                    {
                        XMLConfigLoader xcl;
                        try
                        {
                            xcl = new XMLConfigLoader("file:///" + theProject.getTopicConfigFile().getFile().getPath());



                            comp.compileDataClasses(projectParser.getIdlClasses(), FileHelper.unixSlashed(theProject.getRunDirectory() + "/" + theProject.getRelativeOutputPath()));
                            comp.compileTopicConfig(xcl.getTopics(), theProject.getName(), theProject.getTopicConfigPackage(), FileHelper.unixSlashed(theProject.getRunDirectory() + "/" + theProject.getRelativeOutputPath()));

                        }
                        catch (SAXException ex)
                        {
                            throw new PluginsLoaderException("Error in topic config xml file.");
                        }
                        catch (IOException ex)
                        {
                            throw new PluginsLoaderException("Error in topic config xml file, file not found or could not be opened.");
                        }

                    }


                }
                catch (PluginsLoaderException pluginsLoaderException)
                {
                    outputTextArea.append("Plugins loader failed with the following message: " + pluginsLoaderException.getMessage() + "\n");
                }



            }
        });
        thread.start();



    }//GEN-LAST:event_compileButtonActionPerformed

    private void viewTopicConfigButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewTopicConfigButtonActionPerformed
    {//GEN-HEADEREND:event_viewTopicConfigButtonActionPerformed
        //throw new NullPointerException();

        addTab(theProject.getTopicConfigFile());
    }//GEN-LAST:event_viewTopicConfigButtonActionPerformed

    private void setTopicConfigButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_setTopicConfigButtonActionPerformed
    {//GEN-HEADEREND:event_setTopicConfigButtonActionPerformed

        FileDialog fd = new FileDialog(this);

        fd.setVisible(true);

        File f = new File(fd.getDirectory() + fd.getFile());

        if (f == null)
        {
            return;
        }

        if (!f.getName().endsWith("xml"))
        {
            JOptionPane.showMessageDialog(this, "The selected file must be an xml file (.xml)");
            return;
        }
        TopicConfigFile file;
        try
        {
            file = new TopicConfigFile(f);
            theProject.setTopicConfig(file);
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }

        //addTab(file);

        updateProjectGUIItems();




        fileList.updateUI();
    }//GEN-LAST:event_setTopicConfigButtonActionPerformed

    private void idlFilesTabsKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_idlFilesTabsKeyPressed
    {//GEN-HEADEREND:event_idlFilesTabsKeyPressed

        String s;
    }//GEN-LAST:event_idlFilesTabsKeyPressed

    private void topicConfigToolMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_topicConfigToolMenuItemActionPerformed
    {//GEN-HEADEREND:event_topicConfigToolMenuItemActionPerformed

        TopicConfigTool tct = new TopicConfigTool(theProject);
        tct.setVisible(true);

    }//GEN-LAST:event_topicConfigToolMenuItemActionPerformed

    private void removeFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeFileButtonActionPerformed
    {//GEN-HEADEREND:event_removeFileButtonActionPerformed

        theProject.removeFile((IDLFile) fileList.getSelectedValue());
        try
        {
            theProject.save();
        }
        catch (TopicConfigFileMissingException ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage() + ": " + "Set a Topic Config File before saving project.");
            return;
        }

        fileList.updateUI();

    }//GEN-LAST:event_removeFileButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        if (saveNeeded)
        {
            int result = JOptionPane.showConfirmDialog(this, "Save project and files before closing?", "Closing...", JOptionPane.YES_NO_CANCEL_OPTION);
            if (result == JOptionPane.CANCEL_OPTION)
            {
                return;
            }
            else
            {
                if (result == JOptionPane.YES_OPTION)
                {
                    saveProjectMenuItemActionPerformed(null);
                    System.exit(0);
                }
                else
                {
                    if (result == JOptionPane.NO_OPTION)
                    {
                        System.exit(0);
                    }
                }
            }
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void closeProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectMenuItemActionPerformed

        if (theProject == null)
        {
            return;
        }
        theProject.close();
        theProject = null;
        topicConfigFileList.setListData(new Vector<String>());

        enableProjectButtons(false);

        projectNameLabel.setText("  ");




    }//GEN-LAST:event_closeProjectMenuItemActionPerformed

    private void fileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseClicked


        int clicks = evt.getClickCount();

        byte i = 0;

        boolean owe = i < 0;

        byte arne = (byte) (owe ? 1 : 0);


        if (clicks < 2)
        {
            return;
        }

        IDLFile file = (IDLFile) fileList.getSelectedValue();

        addTab(file);






    }//GEN-LAST:event_fileListMouseClicked

    private void openProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed


        //JFileChooser fd = new JFileChooser();
        FileDialog fd = new FileDialog(this);


        fd.setVisible(true);
        File f = new File(fd.getDirectory() + fd.getFile());

        if (f == null)
        {
            return;
        }

        if (!f.getName().endsWith(".prjold"))
        {
            JOptionPane.showMessageDialog(this, "The selected file must be a project file (.prj)");
            return;
        }
        openProjectFile(f);



    }//GEN-LAST:event_openProjectMenuItemActionPerformed

    private void openProjectFile(final File f)
    {

        theProject = Project.Load(f);

        fileList.setListData(theProject.getIDLFiles());

        fileList.updateUI();

        String projectTitle = theProject.getName();//theProject.getName().substring(theProject.getName().lastIndexOf("/") + 1, theProject.getName().length());

        projectNameLabel.setText(projectTitle);


        //

        enableProjectButtons(true);
    }

    private void saveProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenuItemActionPerformed

        if (theProject == null)
        {
            return;
        }


        for (int i = 0; i < jTabbedPane1.getTabCount(); i++)
        {
            ((FileTab) jTabbedPane1.getComponentAt(i)).save();
        }

        try
        {
            theProject.save();
        }
        catch (TopicConfigFileMissingException ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage() + ": " + "Set a Topic Config File before saving project.");
            return;
        }
        saveNeeded = false;
        projectNameLabel.setText(theProject.getName());
    }//GEN-LAST:event_saveProjectMenuItemActionPerformed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed

        FileDialog fd = new FileDialog(this);

        fd.setVisible(true);

        File f = new File(fd.getDirectory() + fd.getFile());


        if (f == null)
        {
            return;
        }

        if (!f.getName().endsWith("idl"))
        {
            JOptionPane.showMessageDialog(this, "The selected file must be an idl file (.idl)");
            return;
        }

        //String filePath = fd.getDirectory() + fd.getFile();
        String relDir = FileHelper.getRelativePath(theProject.getRunDirectory() + "\\", fd.getDirectory());
        relDir = relDir.replace("\\", "/");
        IDLFile file = new IDLFile(f, theProject.getRunDirectory(), relDir);

        addTab(file);


        theProject.addFile(file);


        fileList.updateUI();

        setSaveNeeded();

    }//GEN-LAST:event_addFileButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        jTabbedPane1.remove(jTabbedPane1.getSelectedComponent());
    }//GEN-LAST:event_closeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed


        FileTab tab = (FileTab) jTabbedPane1.getSelectedComponent();

        tab.save();





    }//GEN-LAST:event_saveButtonActionPerformed

    private void newIDLFilejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newIDLFilejButtonActionPerformed

        String s = null;

        //s = JOptionPane.showInputDialog("Enter file name");
        CreateNewIDLPanel cnip = new CreateNewIDLPanel();
        int ret = JOptionPane.showOptionDialog(null, cnip, "Create New IDL Type", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]
                {
                    "OK", "Cancel"
                }, null);

        if (ret == JOptionPane.NO_OPTION)
        {
            return;
        }
        s = cnip.getName();
        if (s.equals(""))
        {
            return;
        }
        if (!s.endsWith(".idl"))
        {
            s += ".idl";
        }

        s = FileHelper.unixSlashed(theProject.getRunDirectory()) + "/" + cnip.getPath() + s;

        IDLFile newIDL = new IDLFile(new File(s), theProject.getRunDirectory(), cnip.getPath());
        newIDL.setText("package " + cnip.getPackage() + ";\n\nclass " + cnip.getName() + "\n{\n\n\n}");

        theProject.addFile(newIDL);
        addTab(newIDL);
        fileList.updateUI();

        setSaveNeeded();

    }//GEN-LAST:event_newIDLFilejButtonActionPerformed

    private void newProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newProjectMenuItemActionPerformed
    {//GEN-HEADEREND:event_newProjectMenuItemActionPerformed
        try
        {

            CreateProjectPanel cnip = new CreateProjectPanel(this);
            int ret = JOptionPane.showOptionDialog(null, cnip, "Create New IDL Project", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]
                    {
                        "OK", "Cancel"
                    }, null);

            if (ret == JOptionPane.OK_OPTION)
            {
                closeProjectMenuItemActionPerformed(null);
                theProject = cnip.createProject();
                updateProjectGUIItems();
            }
            else
            {
                return;
            }

        }
        catch (MissingInputException ex)
        {
            GUIHelper.showErrorMessage(ex.getMessage(), this);
        }
        catch (IOException ex)
        {
            GUIHelper.showErrorMessage(ex.getMessage(), this);
        }

//        FileDialog fd = new FileDialog(this);
//        fd.setVisible(true);
//
//        String s = /*fd.getDirectory() +*/ fd.getFile();
//        if (s == null)
//        {
//            return;
//        }
//        if (!s.endsWith(".prj"))
//        {
//            s += ".prj";
//        }
//
//        String outputPath = JOptionPane.showInputDialog(this, "Enter relative output path.\nE.g. ../../source/generated");
//        if (!outputPath.endsWith("/"))
//        {
//            outputPath = outputPath + "/";
//        }
//
//
//
//
//        theProject = Project.Load(s, fd.getDirectory());
//        theProject.setRelativeOutputPath(outputPath);
//
//        String projectTitle = theProject.getName();//theProject.getName().substring(theProject.getName().lastIndexOf("/") + 1, theProject.getName().length());
//
//        projectNameLabel.setText(projectTitle);
//
//        jTabbedPane1.removeAll();
//
//
//        fileList.setListData(theProject.getIDLFiles());
//
//        topicConfigPackageField.setText(theProject.getTopicConfigPackage());
//        enableProjectButtons(true);
//        
//        




    }//GEN-LAST:event_newProjectMenuItemActionPerformed

    private void optionsToolMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsToolMenuItemActionPerformed
        new OptionsTool(theProject, this).setVisible(true);
    }//GEN-LAST:event_optionsToolMenuItemActionPerformed

    private void openProjectMenuItemActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed1


        try
        {

            FileDialog fd = new FileDialog(this);

            fd.setVisible(true);

            File f = new File(fd.getDirectory() + fd.getFile());

            if (f == null)
            {
                return;
            }

            if (!f.getName().endsWith(".prj"))
            {
                JOptionPane.showMessageDialog(this, "The selected file must be a project file (.prj)");
                return;
            }
            ProjectFileParser parser = new ProjectFileParser();

            theProject = parser.parse(f.getPath());

            updateProjectGUIItems();


        }
        catch (SAXException ex)
        {
            GUIHelper.showErrorMessage(ex.getMessage(), this);
        }
        catch (IOException ex)
        {
            GUIHelper.showErrorMessage(ex.getMessage(), this);
        }


    }//GEN-LAST:event_openProjectMenuItemActionPerformed1

    public void updateProjectGUIItems()
    {
        fileList.setListData(theProject.getIDLFiles());

        fileList.updateUI();

        String projectTitle = theProject.getName();//theProject.getName().substring(theProject.getName().lastIndexOf("/") + 1, theProject.getName().length());

        projectNameLabel.setText(projectTitle);

        Vector<TopicConfigFile> topicConfigFileListData = new Vector<TopicConfigFile>();
        topicConfigFileListData.add(theProject.getTopicConfigFile());
        topicConfigFileList.setListData(topicConfigFileListData);

        enableProjectButtons(true);
    }

    private void saveProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectButtonActionPerformed
        // TODO add your handling code here:
        if (theProject != null)
        {
            saveProjectMenuItemActionPerformed(null);
        }

}//GEN-LAST:event_saveProjectButtonActionPerformed

    private void parseProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseProjectButtonActionPerformed
        try
        {
            theProject.save();
            parseProject();
        }
        catch (TopicConfigFileMissingException ex)
        {
            GUIHelper.showErrorMessage("You must set a Topic config file to parse or compile a project...", this);
        }


}//GEN-LAST:event_parseProjectButtonActionPerformed

    private void optionsShortCutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsShortCutButtonActionPerformed
        // TODO add your handling code here:
        optionsToolMenuItemActionPerformed(null);
    }//GEN-LAST:event_optionsShortCutButtonActionPerformed

    private boolean parseProject()
    {
        projectParser = new ProjectParser();
        try
        {
            outputTextArea.append("Parsing project...");
            projectParser.parse(theProject);


        }
        catch (ParseException ex)
        {
            //JOptionPane.showMessageDialog(this, ex.getMessage());
            outputTextArea.append("ParseException: " + ex.getMessage() + "\n");
            return false;
        }

        outputTextArea.append("Done.\n");
        outputTextArea.updateUI();


        return true;
    }

    private void cppCompile() throws HeadlessException
    {



        for (IDLFile idlFile : theProject.getIDLFiles())
        {
            Compiler compiler = null;
            try
            {
                //FileTab tab  = (FileTab)jTabbedPane1.getSelectedComponent();

                //IDLFile idlFile = tab.getIdlFile();

                compiler = new CppCompiler(idlFile.getFile(), new File(theProject.getRunDirectory() + "/" + theProject.getRelativeOutputPath()));

                compiler.compile("h");

            }
            catch (Exception ex)
            {

                JOptionPane.showMessageDialog(this, "Error when trying to compile " + idlFile.getName() + " check your IDL-code.");
                break;
            }

        }
        try
        {
            CppTopicConfigCreator ctc = new CppTopicConfigCreator(theProject, theProject.getTopicConfigPackage());
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error when creating topic config class for C++. No topic config class was created." + ex.getMessage());


        }
    }

    private void cSharpCompile() throws HeadlessException
    {


        for (IDLFile idlFile : theProject.getIDLFiles())
        {
            Compiler compiler = null;
            try
            {
                //FileTab tab  = (FileTab)jTabbedPane1.getSelectedComponent();

                //IDLFile idlFile = tab.getIdlFile();

                compiler = new CSCompiler(idlFile.getFile(), new File(theProject.getRunDirectory() + "/" + theProject.getRelativeOutputPath()));

                compiler.compile("cs");




            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this, ex.getClass() + "Error when trying to compile " + idlFile.getName() + " check your IDL-code.");
                break;
            }
        }
        try
        {
            CSTopicConfigCreator ctcc = new CSTopicConfigCreator(theProject, theProject.getTopicConfigPackage());
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Error when creating topic config class for C#. No topic config class was created.");


        }
    }

    private void javaCompile() throws HeadlessException
    {

        String createdFiles = "";
        Compiler compiler = null;
        for (IDLFile idlFile : theProject.getIDLFiles())
        {
            try
            {
                compiler = new JavaCompiler(idlFile.getFile(), new File(theProject.getRunDirectory() + "/" + theProject.getRelativeOutputPath()));
                createdFiles += compiler.compile("java");
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Error when trying to compile " + idlFile.getName() + " check your IDL-code.");
                break;
            }
        }
        JavaTopicConfigCreator jdc;
        try
        {
            jdc = new JavaTopicConfigCreator(theProject, theProject.getTopicConfigPackage());
            createdFiles += jdc.getOutfilePath();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Error when creating topic config class for Java. No topic config class was created.");
        //throw ex;        
        }
        if (theProject.isBuildAndJarEnabled())
        {
            try
            {

                buildAndJar(createdFiles);


            }
            catch (IOException ex)
            {
                JOptionPane.showMessageDialog(this, "Debug information could not be created...");
            }
            catch (InterruptedException ex)
            {
                ex.printStackTrace();
            }
        }
    }

    private void buildAndJar(String createdFiles) throws IOException, InterruptedException, IOException
    {
        String jarPackString = null;
        outputTextArea.append("Running Java build script...");

        String jarDepString = "";
        String manifestJarDepString = "Class-Path: ";
        for (String string : theProject.getJarDependencies())
        {
            jarDepString += ";\"" + theProject.getRunDirectory() + "/" + string + "\"";

            File jarToBeCopied = new File(theProject.getRunDirectory() + "/" + string);
            File jarCopy = new File(theProject.getRunDirectory() + "/" + theProject.getRelativeOutputPath() + "/" + jarToBeCopied.getName());
            jarCopy.createNewFile();
            FileHelper.copyFile(jarToBeCopied, jarCopy);

            manifestJarDepString += jarCopy.getName() + " ";
        }
        manifestJarDepString += "\nTopic-config: " + theProject.getTopicConfigPackage() + "." + theProject.getName() + "TopicConfig";
        manifestJarDepString += "\n";

        String dinfoPath = theProject.getRunDirectory().replace("\\", "/") + "/debugger_buildinfo";
        FileHelper.createAndWriteFile(dinfoPath, createdFiles);

        String manFilePath = theProject.getRunDirectory().replace("\\", "/") + "/manifest_adds.txt";
        FileHelper.createAndWriteFile(manFilePath, manifestJarDepString);

        String execString = "javac -cp lib/OPSJLib.jar" + jarDepString + " @" + "\"" + dinfoPath + "\"";
        String batFileText = execString + "\n";

        //Process proc = Runtime.getRuntime().exec(execString);
        //printJavaCompileError(proc);
        //proc.waitFor();
        //Thread.sleep(6000);




        jarPackString = "jar cfm \"" + FileHelper.unixSlashed(theProject.getRunDirectory()) + "/" + theProject.getRelativeOutputPath() + "/" + FileHelper.cropExtension(theProject.getName()) + ".jar\" \"" + manFilePath + "\" -C \"" + FileHelper.unixSlashed(theProject.getRunDirectory()) + "/" + theProject.getRelativeOutputPath() + "Java" + "\" . ";
        batFileText += jarPackString + "\n";

        //Process p = Runtime.getRuntime().exec(jarPackString);
        Compiler.createAndWriteFile("java_build_script.bat", batFileText);
        //Process p = Runtime.getRuntime().exec("java_build_script.bat");
        //Thread.sleep((1000));
        //p.waitFor();
        Runtime rTime = Runtime.getRuntime();
        Process process = rTime.exec("cmd /c start java_build_script.bat");

//            InputStream p_in = process.getInputStream();
//            OutputStream p_out = process.getOutputStream();
//            InputStream p_err = process.getErrorStream();
        process.waitFor();
//            p_in.close();
//            p_out.close();
//            p_err.close();
    }

    private void printJavaCompileError(final Process proc) throws IOException, HeadlessException
    {

        // Execute a command
        String output = "";
        //Process child = Runtime.getRuntime().exec(command);

        // Read from an input stream
        InputStream in = proc.getInputStream();
        int c;
        while ((c = in.read()) != -1)
        {
            output += c;
        }
        in.close();

        JOptionPane.showMessageDialog(this, output);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        final String arg0;

        if (args.length > 0)
        {
            arg0 = args[0];
        }
        else
        {
            arg0 = "";
        }

        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {

                try
                {
                    new GUI(arg0).setVisible(true);
                }
                catch (Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Unexpected error occured: " + ex.getMessage());
                    String stackTrace = "";
                    for (int i = 0; i < ex.getStackTrace().length; i++)
                    {
                        stackTrace += ex.getStackTrace()[i] + "\n";

                    }
                    JOptionPane.showMessageDialog(null, stackTrace);
                }

            }
        });
    }

    private void enableProjectButtons(boolean b)
    {
        addFileButton.setEnabled(b);
        newIDLFilejButton.setEnabled(b);

        removeFileButton.setEnabled(b);

        setTopicConfigButton.setEnabled(b);

        viewTopicConfigButton.setEnabled(b);
        compileButton.setEnabled(b);



        renameButton.setEnabled(b);

        optionsToolMenuItem1.setEnabled(b);
        topicConfigToolMenuItem1.setEnabled(b);
        saveProjectMenuItem1.setEnabled(b);
        closeProjectMenuItem1.setEnabled(b);

        saveProjectButton.setEnabled(b);
        parseProjectButton.setEnabled(b);
        optionsShortCutButton.setEnabled(b);



    }

    private void setSaveNeeded()
    {
        saveNeeded = true;
        projectNameLabel.setText(theProject.getName() + "*");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JMenuItem closeProjectMenuItem1;
    private javax.swing.JButton compileButton;
    private javax.swing.JList fileList;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton newIDLFilejButton;
    private javax.swing.JMenuItem newProjectMenuItem1;
    private javax.swing.JMenuItem openOldProjectMenuItem1;
    private javax.swing.JMenuItem openProjectMenuItem;
    private javax.swing.JButton optionsShortCutButton;
    private javax.swing.JMenuItem optionsToolMenuItem1;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton parseProjectButton;
    private javax.swing.JList projectList;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JButton removeFileButton;
    private javax.swing.JButton renameButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveProjectButton;
    private javax.swing.JMenuItem saveProjectMenuItem1;
    private javax.swing.JButton setTopicConfigButton;
    private javax.swing.JMenu toolsMenu1;
    private javax.swing.JList topicConfigFileList;
    private javax.swing.JScrollPane topicConfigFileScrollPane;
    private javax.swing.JMenuItem topicConfigToolMenuItem1;
    private javax.swing.JButton viewTopicConfigButton;
    // End of variables declaration//GEN-END:variables
}
