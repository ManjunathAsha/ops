= Request Reply =

OPS is primarily a publish subscribe based middleware which is a specialization of the more general Message Oritented Middleware (MOM) class of middlewares. This class of middlewares (including OPS) focus on passing asynchronous messages from producers to consumers in an event manner, i.e. a consumer registers an interest in getting data once, and then receive data continiously without requesting each data sample.

Most systems however have needs for some kind of request/reply communication in some parts. Middlewares that deals with this kind of communication include Remote Method Invocation (RMI) middlewares and Object Oriented Middlewares (or Object Request Brokers), e.g. CORBA, Java RMI and the Internet Communications Engine (ICE).

Of course, a system can mix technologies and have CORBA and OPS running alongside each other. And if you needs a lot of both request/reply and pub/sub communication, this probably a good idea.   

OPS however offers a request/reply mechanism built on top of common OPS topics. The idea is simple, and you may already have found yourself implementing the same feature:
You create two topics, one request topic (this can be seen as the parameters for the request) and one reply topic (the return value of the request), and finally OPS implement some helper classes to help you with matching the reply to the request and timeout if there is no reply in a certain time.

This is what you need to do to create a simple request/reply case where a requester can request a Hello message:

Create two Data classes in IDL, one for the request and one for the reply, notice that to mark an IDL class as a request or a reply, you extend the OPS core classes ops.Request and ops.Reply directly from your IDL

{{{
package hello;

class RequestHelloData extends ops.Request
{
    /*The name of the requester, will be used to request a reply like "Hello requesterName"*/
    string requestersName;
}
}}}

and

{{{
package hello;

class HelloData extends ops.Reply
{
    /*Reply of a Hello request*/
    string helloString;
}
}}}

ops.Request has one public field which will be used in the background to match replies with the request
{{{
string requestId;
}}}

And ops.Reply has three public fields, which are used for matching and to signal if the request was accepted, and if not a message where the requester can get information about what went wrong.
{{{
string requestId;
boolean requestAccepted;
string message;
}}}



