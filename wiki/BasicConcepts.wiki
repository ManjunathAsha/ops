= Introduction = 

OPS aims to offer asynchronous, efficient and type secure publish-subscribe communication between processes running on multiple platforms written in multiple programming languages.

The communication model of OPS is a typed topic publish-subscribe model. That means that processes that take part in the ops communication can act as publishers or subscribers to different topics. Data published on a certain topic will be delivered to all subscribers to that topic in a way that hides the publishers from the subscribers and vice versa. By ensuring this anonymity the middleware allows for low coupling between different system participants which enables software reuse, modularity, redundancy, language and platform heterogeneity, no single point of failure systems, one-to-many, many-to-one and many-to-many communications. As mentioned above, OPS offers typed topics, which in addition to connecting publishers and subscribers also dictates the format of the data that is sent between them. The messages sent in OPS are data classes that are defined by the system developers in a data definition language called OPS IDL. These data classes may be complex constructs, with inheritence, dynamic arrays, strings, classes of classes and arrays of classes. These data classes are used to auto generate source code for the target programming language that allows for communicating this data in a simple and secure way. The complexity of serializing and deserializing these classes and to be able to send them across the network is completely hidden from the participants, and the classes can be used in an object oriented and type safe way in the application layer of the participants.


= Principles =

 * Participants (i.e. applications residing in computer nodes) publish and subscribe on Typed topics
 * Decentralized architecture, no central service/single point of failure
 * Asynchronous messaging with Quality of Services 
 * Networking and protocol complexity is hidden from the participants
 
http://ops.googlecode.com/svn/wiki/pub_sub_overview.jpg

= Important concepts =
*Topic* – A topic is a user defined string/name that serves as the association between Publishers and Subscribers.

*Publisher* – a Publisher writes data on a certain Topic. 

*Subscriber* – a Subscriber subscribes to a Topic and receives data when a publisher on the same Topic writes data.

*Participant* – a Participant is an application/program that uses the OPS by having subscribers and/or publishers.

*Domain* – Participants that can connect to each other through publishers and subscribers belong to the same Domain. A Domain is defined by a multicast ip address (e.g. 235.35.35.1). By using different Domains two instances of a system can run alongside each other without interfering.

*IDL* – Interface Definition Language (IDL) is the language used to define data classes 
that can be communicated by publishers and subscribers. IDL is a meta language which is compiled, or translated, into various target programming languages (e.g. Java, C++, C# and Ada).

*Data classes* – Data classes is what is communicated between publishers and subscribers. Notice the difference between Data classes and Topics. Each Topic can have only one Data class associated with it, but a Data class can be used by many Topics.


= What problems does it solve? =

 * Information availability 
 * Low coupling
 * Redundancy support
 * Software reuse
 * Task isolation
 * Efficient dissemination of high level data
 * Open architecture
 * Well defined interfaces – data/hardware abstractions
 * Different hardware configurations → same software
 * Language and platform heterogeneity 


Who uses it?

= Pub/sub middleware in distributed control systems =

http://ops.googlecode.com/svn/wiki/control_system_example.jpg

Realtime systems without being realtime???