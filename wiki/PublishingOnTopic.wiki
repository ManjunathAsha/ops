Given a IDL project FooProject with a data type FooData used by a topic FooTopic on a domain FooDomain this is how you set up a subscrption and receive data:


== Java ==


{{{
Participant participant = Participant.getInstance("FooDomain");
participant.addTypeSupport(new FooProject.FooProjectTypeFactory());

Topic topic = participant.createTopic("FooTopic");

FooDataPublisher pub = new FooDataPublisher(topic);

//Create some data
FooData data;

//Publish the data
pub.write(data);


}}}



== C++ ==

Just as in Java, no matter what way (polling or listening) you use to receive the data in C++ the setup of a subscription is always the same and look as follows:

{{{
Participant* participant = Participant::getInstance("FooDomain");
participant->addTypeSupport(new FooProject::FooProjectTypeFactory());

Topic topic = participant->createTopic("FooTopic");

FooDataPublisher pub(topic);

//Create some data
FooData data;

//Publish the data
pub.write(&data);

}}}
