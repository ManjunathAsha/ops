#summary This section describes how and why you use the IDL Compiler to create the outline for a distributed OPS project.

= The IDL Compiler Basics = 
== What is IDL? ==
IDL stands for Interface Definition Language and is a common name for programming language neutral languages used in middlewares to enable support for multiple programming languages (E.g. C++ and Java).
In OPS the IDL language is very simple and is only used to define data classes (i.e. structs). Once a data class is defined in IDL, it can be “compiled” into the desired target programming languages that will be used in your distributed application.
The OPS IDL resembles simplified Java or C++, a simple data class could look as follows:

{{{
package samples;

class SimpleData
{
	int i;
	double d;
	string s;
}
}}}

== The IDL Compiler ==
To edit IDL files and to compile these files into target languages, OPS comes with a tool called the OPS IDL Compiler. The OPS IDL Compiler can be seen as an IDE for OPS projects. The OPS IDL Compiler looks as follows, with the sample code from above open in a sample project:

http://ops.googlecode.com/svn/wiki/idlcompiler.jpg

With the OPS IDL Compiler you create projects containing possibly multiple IDL files with all the different data types you use in your project. The IDL Compiler is also where you define your topics on which you will publish and subscribe to in your applications. This is done by creating a XML configuration file tht looks something like this:
