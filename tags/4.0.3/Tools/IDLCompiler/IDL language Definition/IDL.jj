PARSER_BEGIN(IDLParser)

public class IDLParser {

  public static void main(String args[]) {
    IDLParser parser;
    if (args.length == 0) {
      System.out.println("IDL Parser Version 0.1:  Reading from standard input . . .");
      parser = new IDLParser(System.in);
    } else if (args.length == 1) {
      System.out.println("IDL Parser Version 0.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new IDLParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("IDL Parser Version 0.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("IDL Parser Version 0.1:  Usage is one of:");
      System.out.println("         java IDLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java IDLParser inputfile");
      return;
    }
    try {
      parser.specification();
      System.out.println("IDL Parser Version 0.1:  IDL file parsed successfully.");
    } catch (ParseException e) {
      System.out.println("IDL Parser Version 0.1:  Encountered errors during parse.");
    }
  }

}

PARSER_END(IDLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  < " " >
| < "\t" >
| < "\n" >
| < "\r" >
| < "//" (~["\n"])* "\n" >
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
| < "#" ([" ","\t"])* (["0"-"9"])+
    (([" ","\t"])* "\"" (~["\""])+ "\""
           ([" ","\t"])* (["0"-"9"])* ([" ","\t"])* (["0"-"9"])*)? "\n" >
}

/* Production 1 */

void specification() :
{}
{
  ( definition() )+
}

/* Production 2 */

void definition() :
{}
{
  module() ";" struct_type() 
}

/* Production 3 */

void module() :
{}
{
  "module" identifier() "{" ( definition() )+ "}"
}

void struct_type() :
{}
{
  "struct" identifier() "{" member_list() "}"
}

/* Production 51 */

void member_list() :
{}
{
  ( member() )+
}

/* Production 52 */

void member() :
{}
{
  type_spec() declarators() ";"
}

void identifier() :
{}
{
  <ID>
}

void declarators() :
{}
{
  declarator() ( "," declarator() )*
}

/* Production 35 */

void declarator() :
{}
{
  LOOKAHEAD(2)
  complex_declarator()
|
  simple_declarator()
}


void type_spec() :
{}
{
  simple_type_spec()

}

void simple_type_spec() :
{}
{
  base_type_spec()

}

void base_type_spec() :
{}
{
  floating_pt_type()
|
  integer_type()
|
  char_type()
|
  boolean_type()
|
  octet_type()

}

void simple_declarator() :
{}
{
  identifier()
}

void complex_declarator() :
{}
{
  array_declarator()
}

void array_declarator() :
{}
{
  identifier() ( fixed_array_size() )+
}

/* Production 64 */

void fixed_array_size() :
{}
{
  "[" "]"
}


/* Production 38 */

void floating_pt_type() :
{}
{
  "float"
|
  "double"
}

/* Production 39 */

void integer_type() :
{}
{
  signed_int()
|
  unsigned_int()
}

/* Production 40 */

void signed_int() :
{}
{
  signed_long_int()
|
  signed_short_int()
}

/* Production 41 */

void signed_long_int() :
{}
{
  "long"
}

/* Production 42 */

void signed_short_int() :
{}
{
  "short"
}

/* Production 43 */

void unsigned_int() :
{}
{
  LOOKAHEAD(2)
  unsigned_long_int()
|
  unsigned_short_int()
}

/* Production 44 */

void unsigned_long_int() :
{}
{
  "unsigned" "long"
}

/* Production 45 */

void unsigned_short_int() :
{}
{
  "unsigned" "short"
}

/* Production 46 */

void char_type() :
{}
{
  "char"
}

/* Production 47 */

void boolean_type() :
{}
{
  "boolean"
}

/* Production 48 */

void octet_type() :
{}
{
  "octet"
}

void integer_literal() :
{}
{
  <OCTALINT>
|
  <DECIMALINT>
|
  <HEXADECIMALINT>
}

void string_literal() :
{}
{
  <STRING>
}

void character_literal() :
{}
{
  <CHARACTER>
}

void floating_pt_literal() :
{}
{
  <FLOATONE>
|
  <FLOATTWO>
}

TOKEN :
{
  <  ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
| <  OCTALINT : "0" (["0"-"7"])* (["u","U","l","L"])? >
| <  DECIMALINT : ["1"-"9"] (["0"-"9"])* (["u","U","l","L"])? >
| <  HEXADECIMALINT : ("0x"|"0X") (["0"-"9","a"-"f","A"-"F"])+ (["u","U","l","L"])? >
| <  FLOATONE : ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
   (["e","E"] (["-","+"])? (["0"-"9"])+)? (["f","F","l","L"])? >
| <  FLOATTWO : (["0"-"9"])+ ["e","E"] (["-","+"])?
   (["0"-"9"])+ (["f","F","l","L"])? >
| <  CHARACTER : "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
| <  STRING : "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}



